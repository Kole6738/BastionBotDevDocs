{
    "docs": [
        {
            "location": "/home/",
            "text": "Redirecting\u2026\n#\n\n\nRedirecting you to the Homepage of The Bastion Bot in a few moments.\n\n\nIf you are not automatically being redirected, please visit:\n\nbastionbot.org",
            "title": "The Bastion Bot"
        },
        {
            "location": "/home/#redirecting",
            "text": "Redirecting you to the Homepage of The Bastion Bot in a few moments.  If you are not automatically being redirected, please visit: bastionbot.org",
            "title": "Redirecting..."
        },
        {
            "location": "/docs/",
            "text": "Redirecting\u2026\n#\n\n\nRedirecting you to the Documentation page of The Bastion Bot in a few moments.\n\n\nIf you are not automatically being redirected, please visit:\n\ndocs.bastionbot.org",
            "title": "Intro"
        },
        {
            "location": "/docs/#redirecting",
            "text": "Redirecting you to the Documentation page of The Bastion Bot in a few moments.  If you are not automatically being redirected, please visit: docs.bastionbot.org",
            "title": "Redirecting..."
        },
        {
            "location": "/",
            "text": "Introduction\n#\n\n\n\n\nNote\n\n\nA cool new guide is currently being written for those who want to contribute to\nthe development of Bastion Bot.\n\n\nHold tight, this guide will make it easy to contribute to development, even for\na newbie (like the robo cats in your home).\n\n\nThis guide is currently a work-in-progress and will soon be available. So stay\ntuned.\n\n\n\n\n\n\n\nWelcome to The Bastion Bot Developer Documentation Site.\n\n\nHere you\u2019ll find documentation on how to create commands for Bastion and contribute to the project.\n\n\nAll of our \ndocumentation is on GitHub\n\nand we would \n corrections and improvements!\n\n\n\n\n\nClick on \nNext\n at the bottom right corner to head over to the documentation\nto dive into creating your own custom juice.\n\n\n\n\n\nCome hang out in our \nofficial Discord server\n\nif you wanna chat with other devs, or users and see what\u2019s\nbeing cranked out.\n\n\nWe look forward to seeing you contributing to The Bastion Bot Project and\nimproving it!\n\n\n\n  \n\n    \nYou\u2019ve been invited to join\n\n    \n\n    \n\n      \nThe Bastion Bot\n\n      \nbe awesome!\n\n    \n\n    \nJoin",
            "title": "Intro"
        },
        {
            "location": "/#introduction",
            "text": "Note  A cool new guide is currently being written for those who want to contribute to\nthe development of Bastion Bot.  Hold tight, this guide will make it easy to contribute to development, even for\na newbie (like the robo cats in your home).  This guide is currently a work-in-progress and will soon be available. So stay\ntuned.    Welcome to The Bastion Bot Developer Documentation Site.  Here you\u2019ll find documentation on how to create commands for Bastion and contribute to the project.  All of our  documentation is on GitHub \nand we would   corrections and improvements!   Click on  Next  at the bottom right corner to head over to the documentation\nto dive into creating your own custom juice.   Come hang out in our  official Discord server \nif you wanna chat with other devs, or users and see what\u2019s\nbeing cranked out.  We look forward to seeing you contributing to The Bastion Bot Project and\nimproving it!  \n   \n     You\u2019ve been invited to join \n     \n     \n       The Bastion Bot \n       be awesome! \n     \n     Join",
            "title": "Introduction"
        },
        {
            "location": "/contributing/guidelines/",
            "text": "Contributing to The Bastion Bot Project\n#\n\n\nContributions to The Bastion Bot Project include code, design, documentation,\nideas, bug reports, answering user questions, running the project\u2019s\ninfrastructure, and advocating for all types of Bastion users.\n\n\nThe Bastion Bot Project welcomes all contributions from anyone willing to work\nin good faith with other contributors and the community. No contribution is too\nsmall and all contributions are valued.\n\n\nThis guide explains the process for contributing to the project and describes\nwhat to expect at each step.\n\n\nCode of Conduct\n#\n\n\nThe Bastion Bot Project has a \nCode of Conduct\n that \nall\n contributors are\nexpected to follow. This code describes the \nminimum\n behavior expectations for\nall contributors.\n\n\nSee details on our policy on \nCode of Conduct\n.\n\n\nIssues\n#\n\n\nIssues in any repository of \nThe Bastion Bot GitHub Organization\n are the\nprimary means by which bug reports and feature requests/suggestions are made.\n\n\nPull Requests\n#\n\n\nPull Requests are the way concrete changes are made to the code, documentation,\ndesign, dependencies, and tools contained in the repositories of \nThe Bastion\nBot GitHub Organization\n.\n\n\n\n\nDeveloper\u2019s Certificate of Origin 1.1\n#\n\n\nBy making a contribution to this project, I certify that:\n\n\n\n\n\n\n(a) The contribution was created in whole or in part by me and I\n  have the right to submit it under the open source license\n  indicated in the file; or\n\n\n\n\n\n\n(b) The contribution is based upon previous work that, to the best\n  of my knowledge, is covered under an appropriate open source\n  license and I have the right under that license to submit that\n  work with modifications, whether created in whole or in part\n  by me, under the same open source license (unless I am\n  permitted to submit under a different license), as indicated\n  in the file; or\n\n\n\n\n\n\n\u00a9 The contribution was provided directly to me by some other\n  person who certified (a), (b) or \u00a9 and I have not modified\n  it.\n\n\n\n\n\n\n(d) I understand and agree that this project and the contribution\n  are public and that a record of the contribution (including all\n  personal information I submit with it, including my sign-off) is\n  maintained indefinitely and may be redistributed consistent with\n  this project or the open source license(s) involved.",
            "title": "Contributing Guidelines"
        },
        {
            "location": "/contributing/guidelines/#contributing-to-the-bastion-bot-project",
            "text": "Contributions to The Bastion Bot Project include code, design, documentation,\nideas, bug reports, answering user questions, running the project\u2019s\ninfrastructure, and advocating for all types of Bastion users.  The Bastion Bot Project welcomes all contributions from anyone willing to work\nin good faith with other contributors and the community. No contribution is too\nsmall and all contributions are valued.  This guide explains the process for contributing to the project and describes\nwhat to expect at each step.",
            "title": "Contributing to The Bastion Bot Project"
        },
        {
            "location": "/contributing/guidelines/#code-of-conduct",
            "text": "The Bastion Bot Project has a  Code of Conduct  that  all  contributors are\nexpected to follow. This code describes the  minimum  behavior expectations for\nall contributors.  See details on our policy on  Code of Conduct .",
            "title": "Code of Conduct"
        },
        {
            "location": "/contributing/guidelines/#issues",
            "text": "Issues in any repository of  The Bastion Bot GitHub Organization  are the\nprimary means by which bug reports and feature requests/suggestions are made.",
            "title": "Issues"
        },
        {
            "location": "/contributing/guidelines/#pull-requests",
            "text": "Pull Requests are the way concrete changes are made to the code, documentation,\ndesign, dependencies, and tools contained in the repositories of  The Bastion\nBot GitHub Organization .",
            "title": "Pull Requests"
        },
        {
            "location": "/contributing/guidelines/#developers-certificate-of-origin-11",
            "text": "By making a contribution to this project, I certify that:    (a) The contribution was created in whole or in part by me and I\n  have the right to submit it under the open source license\n  indicated in the file; or    (b) The contribution is based upon previous work that, to the best\n  of my knowledge, is covered under an appropriate open source\n  license and I have the right under that license to submit that\n  work with modifications, whether created in whole or in part\n  by me, under the same open source license (unless I am\n  permitted to submit under a different license), as indicated\n  in the file; or    \u00a9 The contribution was provided directly to me by some other\n  person who certified (a), (b) or \u00a9 and I have not modified\n  it.    (d) I understand and agree that this project and the contribution\n  are public and that a record of the contribution (including all\n  personal information I submit with it, including my sign-off) is\n  maintained indefinitely and may be redistributed consistent with\n  this project or the open source license(s) involved.",
            "title": "Developer's Certificate of Origin 1.1"
        },
        {
            "location": "/contributing/issues/",
            "text": "Issues\n#\n\n\n\n\nHow to Contribute in Issues\n\n\nAsking for Help\n\n\nSubmitting an Issue\n\n\nTriaging an Issue\n\n\nResolving an Issue\n\n\n\n\nHow to Contribute in Issues\n#\n\n\nFor any issue, there are fundamentally three ways an individual can\ncontribute:\n\n\n\n\nBy opening the issue for discussion: For instance, if you believe that you\n    have uncovered a bug in Bastion or if you have a feature request/suggestion,\n    creating a new issue in the respective repository\u2019s issue tracker, in any of\n    \nThe Bastion Bot GitHub Organization\n is the way to do it.\n\n\nBy helping to triage the issue: This can be done either by providing\n    supporting details (a test case that demonstrates a bug), or providing\n    suggestions on how to address the issue.\n\n\nBy helping to resolve the issue: Typically this is done either in the form\n    of demonstrating that the reported bug is not a problem after all, or by\n    suggesting how to implement the requested feature or suggestion, or more\n    often, by opening a Pull Request that changes some bit of something in\n    the code in a concrete and reviewable manner.\n\n\n\n\nAsking for Help\n#\n\n\nBecause we only limit the issue trackers of all the repositories to bug reports\nand feature request/suggestions, questions or requests for general help using\nregarding Bastion and the project should be directed to the \nBastion HQ\n.\n\n\nSubmitting an Issue\n#\n\n\nWhen opening a new issue in any issue tracker, of \nThe Bastion Bot GitHub\nOrganization\n, you will be presented with a basic template that should be filled\nin.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n<!--\n    Thank you for opening an issue.\n\n    This issue tracker is for bugs and issues found within this repository, and\n    for feature requests/suggestions for this repository.\n    If you require general support or if you have some question, please ask in\n    the Bastion HQ: https://discord.gg/fzx8fkt\n\n\n    Please fill in as much of the template below as you're able.\n-->\n\n\n#### I'm opening this issue because:\n<!--\n    Put an X between the brackets on the following lines if a statement is true.\n    For example,\n      -  [X] - This statement is true.\n      -  [ ] - This statement is false.\n-->\n\n -  [ ] I want to report a bug/issue.\n -  [ ] I want to request a feature or suggest something.\n\n\n#### Supporting Information:\n<!-- Only required if you're reporting a bug/issue. -->\n\n<!-- Displayed in the output of Bastion's `stats` or `changelog` command -->\n -  **Bastion Version**:\n\n<!-- Output of `node -v` -->\n -  **Node.js Version**:\n\n<!-- Output of `npm -v` -->\n -  **NPM Version**:\n\n<!--\n    In Linux/macOS, output of `uname -a` or the version of Windows.\n    And if your Operating System is 32-bit or 64-bit.\n-->\n -  **Platform**:\n\n\n<!--\n    Enter your issue details, in as much details as possible, after the end of\n    this section.\n\n    In case of filing a bug report, please provide us with the details so that\n    we can recreate the issue/problem on our own, keeping it as simple as\n    possible.\n    And, in case of a feature request/suggestion, please provide us with\n    enough detail so that we can understand what the feature should be able to\n    do so that we can understand your requirements and implement it as soon as\n    possible.\n-->\n\n\n\n\n\n\nIf you believe that you have uncovered a bug/issue or if you have want to\nrequest any feature or suggest something in any repository, please fill out this\nform, following the template to the best of your ability. Some repository might\nask you for more details based on the requirements. Do not worry if you\ncannot answer every detail, just fill in what you can.\n\n\nThe two most important pieces of information we need in order to properly\nevaluate the report is a description of the behavior you are seeing or want to\nsuggest and, in case of bug reports, a simple test case we can use to recreate\nthe problem on our own. If we cannot recreate the issue, it becomes impossible\nfor us to fix.\n\n\nIn order to rule out the possibility of bugs introduced by userland code, you\nshouldn\u2019t have modified any code of Bastion unless you\u2019ve been told to do so\nby a \nmember of The Bastion Bot Project\n.\n\n\nIf the bug occurs only when you\u2019re using a specific userland/custom module, or\nwhen you\u2019ve modified some part of the code, there is a very good chance that\neither (a) the module has a bug or (b) something in the core has changed that\nbroke the module.\n\n\nSee \nHow to create a Minimal, Complete, and Verifiable example\n.\n\n\nTriaging an Issue\n#\n\n\nOnce an issue has been opened, it is not uncommon for there to be discussion\naround it. Some contributors may have differing opinions about the issue,\nincluding whether the behavior being seen is a bug or a feature or if the\nrequested feature/suggestion can already be done in some way using existing\nfeatures or they may see it as unneeded. This discussion is part of the process\nand should be kept focused, helpful, and professional.\n\n\nShort, clipped responses \u2014 that provide neither additional context nor\nsupporting detail \u2014 are not helpful or professional. To many, such responses are\nsimply annoying and unfriendly.\n\n\nContributors are encouraged to help one another make forward progress as much\nas possible, empowering one another to solve/discuss issues collaboratively. If\nyou choose to comment on an issue that you feel either is not a problem that\nneeds to be fixed, or if you encounter information in an issue that you feel is\nincorrect, or either if you think the requested feature/suggestion can be done\nusing existing features or if you think it is unneeded, explain \nwhy\n you feel\nthat way with additional supporting context, and be willing to be convinced that\nyou may be wrong. By doing so, we can often reach the correct outcome much\nfaster.\n\n\nResolving an Issue\n#\n\n\nIn the vast majority of cases, issues/feature requests are resolved/implemented\nby opening a Pull Request. The process for opening and reviewing a Pull Request\nis similar to that of opening and triaging issues, but carries with it a\nnecessary review and approval workflow that ensures that the proposed changes\nmeet the minimal quality and functional guidelines of The Bastion Bot Project.",
            "title": "Issues"
        },
        {
            "location": "/contributing/issues/#issues",
            "text": "How to Contribute in Issues  Asking for Help  Submitting an Issue  Triaging an Issue  Resolving an Issue",
            "title": "Issues"
        },
        {
            "location": "/contributing/issues/#how-to-contribute-in-issues",
            "text": "For any issue, there are fundamentally three ways an individual can\ncontribute:   By opening the issue for discussion: For instance, if you believe that you\n    have uncovered a bug in Bastion or if you have a feature request/suggestion,\n    creating a new issue in the respective repository\u2019s issue tracker, in any of\n     The Bastion Bot GitHub Organization  is the way to do it.  By helping to triage the issue: This can be done either by providing\n    supporting details (a test case that demonstrates a bug), or providing\n    suggestions on how to address the issue.  By helping to resolve the issue: Typically this is done either in the form\n    of demonstrating that the reported bug is not a problem after all, or by\n    suggesting how to implement the requested feature or suggestion, or more\n    often, by opening a Pull Request that changes some bit of something in\n    the code in a concrete and reviewable manner.",
            "title": "How to Contribute in Issues"
        },
        {
            "location": "/contributing/issues/#asking-for-help",
            "text": "Because we only limit the issue trackers of all the repositories to bug reports\nand feature request/suggestions, questions or requests for general help using\nregarding Bastion and the project should be directed to the  Bastion HQ .",
            "title": "Asking for Help"
        },
        {
            "location": "/contributing/issues/#submitting-an-issue",
            "text": "When opening a new issue in any issue tracker, of  The Bastion Bot GitHub\nOrganization , you will be presented with a basic template that should be filled\nin.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56 <!--\n    Thank you for opening an issue.\n\n    This issue tracker is for bugs and issues found within this repository, and\n    for feature requests/suggestions for this repository.\n    If you require general support or if you have some question, please ask in\n    the Bastion HQ: https://discord.gg/fzx8fkt\n\n\n    Please fill in as much of the template below as you're able.\n-->\n\n\n#### I'm opening this issue because:\n<!--\n    Put an X between the brackets on the following lines if a statement is true.\n    For example,\n      -  [X] - This statement is true.\n      -  [ ] - This statement is false.\n-->\n\n -  [ ] I want to report a bug/issue.\n -  [ ] I want to request a feature or suggest something.\n\n\n#### Supporting Information:\n<!-- Only required if you're reporting a bug/issue. -->\n\n<!-- Displayed in the output of Bastion's `stats` or `changelog` command -->\n -  **Bastion Version**:\n\n<!-- Output of `node -v` -->\n -  **Node.js Version**:\n\n<!-- Output of `npm -v` -->\n -  **NPM Version**:\n\n<!--\n    In Linux/macOS, output of `uname -a` or the version of Windows.\n    And if your Operating System is 32-bit or 64-bit.\n-->\n -  **Platform**:\n\n\n<!--\n    Enter your issue details, in as much details as possible, after the end of\n    this section.\n\n    In case of filing a bug report, please provide us with the details so that\n    we can recreate the issue/problem on our own, keeping it as simple as\n    possible.\n    And, in case of a feature request/suggestion, please provide us with\n    enough detail so that we can understand what the feature should be able to\n    do so that we can understand your requirements and implement it as soon as\n    possible.\n-->   If you believe that you have uncovered a bug/issue or if you have want to\nrequest any feature or suggest something in any repository, please fill out this\nform, following the template to the best of your ability. Some repository might\nask you for more details based on the requirements. Do not worry if you\ncannot answer every detail, just fill in what you can.  The two most important pieces of information we need in order to properly\nevaluate the report is a description of the behavior you are seeing or want to\nsuggest and, in case of bug reports, a simple test case we can use to recreate\nthe problem on our own. If we cannot recreate the issue, it becomes impossible\nfor us to fix.  In order to rule out the possibility of bugs introduced by userland code, you\nshouldn\u2019t have modified any code of Bastion unless you\u2019ve been told to do so\nby a  member of The Bastion Bot Project .  If the bug occurs only when you\u2019re using a specific userland/custom module, or\nwhen you\u2019ve modified some part of the code, there is a very good chance that\neither (a) the module has a bug or (b) something in the core has changed that\nbroke the module.  See  How to create a Minimal, Complete, and Verifiable example .",
            "title": "Submitting an Issue"
        },
        {
            "location": "/contributing/issues/#triaging-an-issue",
            "text": "Once an issue has been opened, it is not uncommon for there to be discussion\naround it. Some contributors may have differing opinions about the issue,\nincluding whether the behavior being seen is a bug or a feature or if the\nrequested feature/suggestion can already be done in some way using existing\nfeatures or they may see it as unneeded. This discussion is part of the process\nand should be kept focused, helpful, and professional.  Short, clipped responses \u2014 that provide neither additional context nor\nsupporting detail \u2014 are not helpful or professional. To many, such responses are\nsimply annoying and unfriendly.  Contributors are encouraged to help one another make forward progress as much\nas possible, empowering one another to solve/discuss issues collaboratively. If\nyou choose to comment on an issue that you feel either is not a problem that\nneeds to be fixed, or if you encounter information in an issue that you feel is\nincorrect, or either if you think the requested feature/suggestion can be done\nusing existing features or if you think it is unneeded, explain  why  you feel\nthat way with additional supporting context, and be willing to be convinced that\nyou may be wrong. By doing so, we can often reach the correct outcome much\nfaster.",
            "title": "Triaging an Issue"
        },
        {
            "location": "/contributing/issues/#resolving-an-issue",
            "text": "In the vast majority of cases, issues/feature requests are resolved/implemented\nby opening a Pull Request. The process for opening and reviewing a Pull Request\nis similar to that of opening and triaging issues, but carries with it a\nnecessary review and approval workflow that ensures that the proposed changes\nmeet the minimal quality and functional guidelines of The Bastion Bot Project.",
            "title": "Resolving an Issue"
        },
        {
            "location": "/contributing/pulls/",
            "text": "Pull Requests\n#\n\n\nThere are two fundamental components of the Pull Request process: one concrete\nand technical, and one more process oriented. The concrete and technical\ncomponent involves the specific details of setting up your local environment\nso that you can make the actual changes. This is where we will start.\n\n\nSetting up your local environment\n#\n\n\nTo get started, you will need to have \ngit\n installed locally. Depending on\nyour operating system and which project you\u2019re contributing to, there are also a\nnumber of other dependencies required. Those are detailed in their respective\nrepositories.\n\n\nOnce you have \ngit\n and are sure you have all of the necessary dependencies,\nit\u2019s time to create a fork.\n\n\nStep 1: Fork\n#\n\n\nFork the project you want to contribute to \non GitHub\n\nand clone your fork locally and add the remote upstream branch.\nYou can find specific guides in the respective repositories.\n\n\n1\n2\n3\n4\ngit clone https://github.com/TheBastionBot/Bastion.git\n\ncd\n node\ngit remote add upstream https://github.com/nodejs/node.git\ngit fetch upstream\n\n\n\n\n\n\nIt is recommended to configure \ngit\n so that it knows who you are:\n\n\n1\n2\ngit config user.name \n\"Barry Allen\"\n\ngit config user.email \n\"barryallen@starlabs.com\"\n\n\n\n\n\n\n\nPlease make sure this local email is also added to your\n\nGitHub email list\n so that your commits\nwill be properly associated with your account and you will be promoted\nto Contributor once your first commit is landed.\n\n\nStep 2: Branch\n#\n\n\nAs a best practice to keep your development environment as organized as\npossible, create local branches to work within. These should also be created\ndirectly off of the \nmaster\n branch.\n\n\n1\ngit checkout -b my-branch -t upstream/master\n\n\n\n\n\n\nThe Process of Making Changes\n#\n\n\nStep 3: Code\n#\n\n\nMake changes to the code or documentation (including code comments and API\ndocumentation) or anything you want to change in the repository you\u2019re trying to\ncontribute to, and please be sure to run the test scripts (if any) from time to\ntime to ensure that the changes doesn\u2019t break anything and follow the specified\ncode style guide.\n\n\nStep 4: Commit\n#\n\n\nIt is a recommended best practice to keep your changes as logically grouped\nas possible within individual commits. There is no limit to the number of\ncommits any single Pull Request may have, and many contributors find it easier\nto review changes that are split across multiple commits.\n\n\n1\n2\ngit add my/changed/files\ngit commit\n\n\n\n\n\n\n\n\n\nIt is a best practice to make only one implementation, including any changes\nthat\u2019s related to it, per commit. All tests should always pass for each\nindividual commit.\n\n\nCommit message guidelines\n#\n\n\nA good commit message should describe what changed and why.\n\n\n\n\n\n\nThe first line should:\n\n\n\n\ncontain a short description of the change (preferably 50 characters or\n  less, and no more than 72 characters)\n\n\nbe entirely in lowercase with the exception of proper nouns, acronyms, and\n  the words that refer to code, like function/variable names\n\n\nbe prefixed with the name of the changed module (if applicable) and start\n  with an imperative verb.\n\n\n\n\nExamples:\n- \ncommandHandler: add guildPrefix to the Guild object\n\n- \ndocs: fix typos in getting-started.md\n\n\n\n\n\n\nKeep the second line blank.\n\n\n\n\n\n\nWrap all other lines at 72 columns (except for long URLs).\n\n\n\n\n\n\nIf your patch fixes an open issue, you can add a reference to it at the end\n    of the log. Use the \nFixes:\n prefix and the full issue URL. For other\n    references use \nRefs:\n.\n\n\nExamples:\n- \nFixes: https://github.com/TheBastionBot/Bastion/issues/1337\n\n- \nRefs: http://docs.bastionbot.org/install/linux\n\n- \nRefs: https://github.com/k3rn31p4nic/cleverbot.js/pull/3\n\n\n\n\n\n\nIf your commit introduces a breaking change (\nSemver: major\n), it should\n    contain an explanation about the reason of the breaking change, which\n    situation would trigger the breaking change and what is the exact change.\n\n\n\n\n\n\nSample complete commit message:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nmodule: explain the commit in one line\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, feature being added, etc.\n\nThe body of the commit message can be several paragraphs, and\nplease do proper word-wrap and keep columns shorter than about\n72 characters or so. That way, `git log` will show things nicely\neven when it is indented.\n\nFixes: https://github.com/nodejs/node/issues/1337\nRefs: http://eslint.org/docs/rules/space-in-parens.html\n\n\n\n\n\n\nIf you are new to contributing to this project, please try to do your best at\nconforming to these guidelines, but do not worry if you get something wrong.\nOne of the existing contributors will help get things situated and the\ncontributor landing the Pull Request will ensure that everything follows\nthe project guidelines.\n\n\nSee \ncore-validate-commit\n -\nA utility that ensures commits follow the commit formatting guidelines.\n\n\nStep 5: Rebase\n#\n\n\nAs a best practice, once you have committed your changes, it is a good idea\nto use \ngit rebase\n (not \ngit merge\n) to synchronize your work with the main\nrepository.\n\n\n1\n2\ngit fetch upstream\ngit rebase upstream/master\n\n\n\n\n\n\nThis ensures that your working branch has the latest changes from upstream\nbranch master, in [The Bastion Bot GitHub Organization].\n\n\nStep 6: Push\n#\n\n\nOnce you are sure your commits are ready to go, with passing tests and linting,\nbegin the process of opening a Pull Request by pushing your working branch to\nyour fork on GitHub.\n\n\n1\ngit push origin my-branch\n\n\n\n\n\n\nStep 7: Opening the Pull Request\n#\n\n\nFrom within GitHub, opening a new Pull Request will present you with a template\nthat should be filled out:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n<!--\n    Thank you for your Pull Request. Please provide a description above and fill\n    in as much of the template below as you're able.\n-->\n\n#### Purpose of this Pull Request\n<!-- Change [ ] to [X] if a statement is true. -->\n\n- [ ] Non-code changes (e.g. documentation, strings, readme, etc.)\n- [ ] Bug fixes\n- [ ] Improvements/enhancements\n- [ ] Add a feature/command\n- [ ] Remove a feature/command\n- [ ] Add something to the core\n- [ ] Remove something from the core\n- [ ] Other, please explain:\n\n#### Possible drawbacks\n<!--\n    Are there any possible side-effects or negative impacts of the code change?\n    If yes, please, state them.\n-->\n\n#### Applicable Issues:\n<!--\n    Link any applicable Issues/PRs here. With a brief description explaining\n    why.\n-->\n\n#### Checklist\n<!-- For completed items, change [ ] to [x]. -->\n\n- [ ] Test scripts (if any) passes\n- [ ] documentation is changed or added\n- [ ] commit message follows commit guidelines\n\n\n\n\n\n\nPlease try to do your best at filling out the details, but feel free to skip\nparts if you\u2019re not sure what to put.\n\n\nOnce opened, Pull Requests are usually reviewed within a few days.\n\n\nStep 8: Discuss and update\n#\n\n\nYou will probably get feedback or requests for changes to your Pull Request.\nThis is a big part of the submission process so don\u2019t be discouraged! Some\ncontributors may sign off on the Pull Request right away, others may have\nmore detailed comments or feedback. This is a necessary part of the process\nin order to evaluate whether the changes are correct and necessary.\n\n\nIf you are still working on your Pull Request after you\u2019ve opened it, please\nadd a \n[WIP]\n prefix to the Pull Request title, so that our \nBastion GitHub Bot\n\nwill prevent the Pull Request from being merged, until you\u2019re done working with\nit and remove the \n[WIP]\n prefix.\n\n\n1\n[WIP] Add Spanish translation\n\n\n\n\n\n\nTo make changes to an existing Pull Request, make the changes to your local\nbranch, add a new commit with those changes, and push those to your fork.\nGitHub will automatically update the Pull Request.\n\n\n1\n2\n3\ngit add my/changed/files\ngit commit\ngit push origin my-branch\n\n\n\n\n\n\nIt is also frequently necessary to synchronize your Pull Request with other\nchanges that have landed in \nmaster\n by using \ngit rebase\n:\n\n\n1\n2\n3\ngit fetch --all\ngit rebase origin/master\ngit push --force-with-lease origin my-branch\n\n\n\n\n\n\nImportant:\n The \ngit push --force-with-lease\n command is one of the few ways\nto delete history in \ngit\n. Before you use it, make sure you understand the\nrisks. If in doubt, you can always ask for guidance in the Pull Request comments\nor in the \nBastion HQ\n.\n\n\nIf you happen to make a mistake in any of your commits, do not worry. You can\namend the last commit (for example if you want to change the commit log).\n\n\n1\n2\n3\ngit add any/changed/files\ngit commit --amend\ngit push --force-with-lease origin my-branch\n\n\n\n\n\n\nThere are a number of more advanced mechanisms for managing commits using\n\ngit rebase\n that can be used, but are beyond the scope of this guide.\n\n\nFeel free to post a comment in the Pull Request to ping reviewers if you are\nawaiting an answer on something. If you encounter words or acronyms that\nseem unfamiliar, refer to this\n\nglossary\n.\n\n\nApproval and Request Changes Workflow\n#\n\n\nAll Pull Requests require \u201csign off\u201d in order to land. Whenever a contributor\nreviews a Pull Request they may find specific details that they would like to\nsee changed or fixed. These may be as simple as fixing a typo, or may involve\nsubstantive changes to the code you have written. While such requests are\nintended to be helpful, they may come across as abrupt or unhelpful, especially\nrequests to change things that do not include concrete suggestions on \nhow\n to\nchange them.\n\n\nTry not to be discouraged. If you feel that a particular review is unfair,\nsay so, or contact one of the other contributors in the project and seek their\ninput. Often such comments are the result of the reviewer having only taken a\nshort amount of time to review and are not ill-intended. Such issues can often\nbe resolved with a bit of patience. That said, reviewers should be expected to\nbe helpful in their feedback, and feedback that is simply vague, dismissive and\nunhelpful is likely safe to ignore.\n\n\nStep 9: Landing\n#\n\n\nIn order to land, a Pull Request needs to be reviewed and [approved] by\nat least one Bastion Collaborator and pass all the required status checks.\nAfter that, as long as there are no objections from other contributors, the Pull\nRequest can be merged. If you find your Pull Request waiting longer than you\nexpect, see the \nnotes about the waiting time\n.\n\n\nWhen a collaborator lands your Pull Request, they should and will post\na comment to the Pull Request page thanking you for your contribution.\nIf you look at the branch you raised your Pull Request against (probably\n\nmaster\n), you should see your commits in it.\n\n\nCongratulations and thanks for your contribution!\n\n\nReviewing Pull Requests\n#\n\n\nAll contributors who choose to review and provide feedback on Pull Requests have\na responsibility to both the project and the individual making the contribution.\nReviews and feedback must be helpful, insightful, and geared towards improving\nthe contribution as opposed to simply blocking it. If there are reasons why you\nfeel the PR should not land, explain what those are. Do not expect to be able to\nblock a Pull Request from advancing simply because you say \u201cNo\u201d without giving\nan explanation. Be open to having your mind changed. Be open to working with the\ncontributor to make the Pull Request better.\n\n\nReviews that are dismissive or disrespectful of the contributor or any other\nreviewers are strictly counter to the \nCode of Conduct\n.\n\n\nWhen reviewing a Pull Request, the primary goals are for the codebase to improve\nand for the person submitting the request to succeed. Even if a Pull Request\ndoes not land, the submitters should come away from the experience feeling like\ntheir effort was not wasted or unappreciated. Every Pull Request from a new\ncontributor is an opportunity to grow the community.\n\n\nReview a bit at a time.\n#\n\n\nDo not overwhelm new contributors.\n\n\nIt is tempting to micro-optimize and make everything about relative performance,\nperfect grammar, or exact style matches. Do not succumb to that temptation.\n\n\nFocus first on the most significant aspects of the change:\n\n\n\n\nDoes this change make sense for the project?\n\n\nDoes this change make the project better, even if only incrementally?\n\n\nAre there clear bugs or larger scale issues that need attending to?\n\n\nIs the commit message readable and correct? If it contains a breaking change\n    is it clear enough?\n\n\n\n\nWhen changes are necessary, \nrequest\n them, do not \ndemand\n them, and do not\nassume that the submitter already knows how to do a task that you think is\nobvious, it might not be that obvious for him and that\u2019s okay; Every one starts\nat some point, and they will learn with time.\n\n\nSpecific performance optimization techniques, coding styles and conventions\nchange over time. The first impression you give to a new contributor never does.\n\n\nNits (requests for small changes that are not essential) are fine, but try to\navoid stalling the Pull Request. Most nits can typically be fixed by the\nCollaborator landing the Pull Request but they can also be an opportunity for\nthe contributor to learn a bit more about the project.\n\n\nIt is always good to clearly indicate nits when you comment: e.g.\n\nNit: change foo() to bar(). But this is not blocking.\n\n\nIf your comments were addressed but were not folded automatically after new\ncommits or if they proved to be mistaken, please, \nhide them\n\nwith the appropriate reason to keep the conversation flow concise and relevant.\n\n\nBe aware of the person behind the code\n#\n\n\nBe aware that \nhow\n you communicate requests and reviews in your feedback can\nhave a significant impact on the success of the Pull Request. Yes, we may land\na particular change that makes the project better, but the individual might just\nnot want to have anything to do with the project ever again. The goal is not\njust having good code.\n\n\nRespect the minimum wait time for comments\n#\n\n\nThere is a minimum waiting time which we try to respect for important\nchanges, so that people who may have important input are able to respond.\n\n\nFor important changes, Pull Requests must be left open for \nat least\n 48\nhours during the week, and 72 hours on a weekend. In most cases, when the\nPR is relatively small and focused on a narrow set of changes, these periods\nprovide more than enough time to adequately review. Sometimes changes take far\nlonger to review, or need more specialized review from subject matter experts.\nWhen in doubt, do not rush.\n\n\nTrivial changes, typically limited to small formatting changes or fixes to\ndocumentation, may be landed within the minimum 48 hour window.\n\n\nAbandoned or Stalled Pull Requests\n#\n\n\nIf a Pull Request appears to be abandoned or stalled, it is polite to first\ncheck with the contributor to see if they intend to continue the work before\nchecking if they would mind if you took it over (especially if it just has\nnits left). When doing so, it is courteous to give the original contributor\ncredit for the work they started (either by preserving their name and email\naddress in the commit log, or by using an \nAuthor:\n meta-data tag in the\ncommit.\n\n\nApproving a change\n#\n\n\nAny Collaborator (any GitHub user with commit rights in the project\u2019s\nrepositories) is authorized to approve any other contributor\u2019s work.\nCollaborators are not permitted to approve their own Pull Requests.\n\n\nCollaborators indicate that they have reviewed and approve of the changes in\na Pull Request either by using GitHub\u2019s Approval Workflow, which is preferred,\nor by leaving an \nLGTM\n (\u201cLooks Good To Me\u201d) comment.\n\n\nWhen explicitly using the \u201cChanges requested\u201d component of the GitHub Approval\nWorkflow, show empathy. That is, do not be rude or abrupt with your feedback\nand offer concrete suggestions for improvement, if possible. If you\u2019re not\nsure \nhow\n a particular change can be improved, say so.\n\n\nMost importantly, after leaving such requests, it is courteous to make yourself\navailable later to check whether your comments have been addressed.\n\n\nIf you see that requested changes have been made, you can clear another\ncollaborator\u2019s \nChanges requested\n review.\n\n\nChange requests that are vague, dismissive, or unconstructive may also be\ndismissed if requests for greater clarification go unanswered within a\nreasonable period of time.\n\n\nIf you do not believe that the Pull Request should land at all, use\n\nChanges requested\n to indicate that you are considering some of your comments\nto block the PR from landing. When doing so, explain \nwhy\n you believe the\nPull Request should not land along with an explanation of what may be an\nacceptable alternative course, if any.",
            "title": "Pull Requests"
        },
        {
            "location": "/contributing/pulls/#pull-requests",
            "text": "There are two fundamental components of the Pull Request process: one concrete\nand technical, and one more process oriented. The concrete and technical\ncomponent involves the specific details of setting up your local environment\nso that you can make the actual changes. This is where we will start.",
            "title": "Pull Requests"
        },
        {
            "location": "/contributing/pulls/#setting-up-your-local-environment",
            "text": "To get started, you will need to have  git  installed locally. Depending on\nyour operating system and which project you\u2019re contributing to, there are also a\nnumber of other dependencies required. Those are detailed in their respective\nrepositories.  Once you have  git  and are sure you have all of the necessary dependencies,\nit\u2019s time to create a fork.",
            "title": "Setting up your local environment"
        },
        {
            "location": "/contributing/pulls/#step-1-fork",
            "text": "Fork the project you want to contribute to  on GitHub \nand clone your fork locally and add the remote upstream branch.\nYou can find specific guides in the respective repositories.  1\n2\n3\n4 git clone https://github.com/TheBastionBot/Bastion.git cd  node\ngit remote add upstream https://github.com/nodejs/node.git\ngit fetch upstream   It is recommended to configure  git  so that it knows who you are:  1\n2 git config user.name  \"Barry Allen\" \ngit config user.email  \"barryallen@starlabs.com\"    Please make sure this local email is also added to your GitHub email list  so that your commits\nwill be properly associated with your account and you will be promoted\nto Contributor once your first commit is landed.",
            "title": "Step 1: Fork"
        },
        {
            "location": "/contributing/pulls/#step-2-branch",
            "text": "As a best practice to keep your development environment as organized as\npossible, create local branches to work within. These should also be created\ndirectly off of the  master  branch.  1 git checkout -b my-branch -t upstream/master",
            "title": "Step 2: Branch"
        },
        {
            "location": "/contributing/pulls/#the-process-of-making-changes",
            "text": "",
            "title": "The Process of Making Changes"
        },
        {
            "location": "/contributing/pulls/#step-3-code",
            "text": "Make changes to the code or documentation (including code comments and API\ndocumentation) or anything you want to change in the repository you\u2019re trying to\ncontribute to, and please be sure to run the test scripts (if any) from time to\ntime to ensure that the changes doesn\u2019t break anything and follow the specified\ncode style guide.",
            "title": "Step 3: Code"
        },
        {
            "location": "/contributing/pulls/#step-4-commit",
            "text": "It is a recommended best practice to keep your changes as logically grouped\nas possible within individual commits. There is no limit to the number of\ncommits any single Pull Request may have, and many contributors find it easier\nto review changes that are split across multiple commits.  1\n2 git add my/changed/files\ngit commit    It is a best practice to make only one implementation, including any changes\nthat\u2019s related to it, per commit. All tests should always pass for each\nindividual commit.",
            "title": "Step 4: Commit"
        },
        {
            "location": "/contributing/pulls/#commit-message-guidelines",
            "text": "A good commit message should describe what changed and why.    The first line should:   contain a short description of the change (preferably 50 characters or\n  less, and no more than 72 characters)  be entirely in lowercase with the exception of proper nouns, acronyms, and\n  the words that refer to code, like function/variable names  be prefixed with the name of the changed module (if applicable) and start\n  with an imperative verb.   Examples:\n-  commandHandler: add guildPrefix to the Guild object \n-  docs: fix typos in getting-started.md    Keep the second line blank.    Wrap all other lines at 72 columns (except for long URLs).    If your patch fixes an open issue, you can add a reference to it at the end\n    of the log. Use the  Fixes:  prefix and the full issue URL. For other\n    references use  Refs: .  Examples:\n-  Fixes: https://github.com/TheBastionBot/Bastion/issues/1337 \n-  Refs: http://docs.bastionbot.org/install/linux \n-  Refs: https://github.com/k3rn31p4nic/cleverbot.js/pull/3    If your commit introduces a breaking change ( Semver: major ), it should\n    contain an explanation about the reason of the breaking change, which\n    situation would trigger the breaking change and what is the exact change.    Sample complete commit message:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 module: explain the commit in one line\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, feature being added, etc.\n\nThe body of the commit message can be several paragraphs, and\nplease do proper word-wrap and keep columns shorter than about\n72 characters or so. That way, `git log` will show things nicely\neven when it is indented.\n\nFixes: https://github.com/nodejs/node/issues/1337\nRefs: http://eslint.org/docs/rules/space-in-parens.html   If you are new to contributing to this project, please try to do your best at\nconforming to these guidelines, but do not worry if you get something wrong.\nOne of the existing contributors will help get things situated and the\ncontributor landing the Pull Request will ensure that everything follows\nthe project guidelines.  See  core-validate-commit  -\nA utility that ensures commits follow the commit formatting guidelines.",
            "title": "Commit message guidelines"
        },
        {
            "location": "/contributing/pulls/#step-5-rebase",
            "text": "As a best practice, once you have committed your changes, it is a good idea\nto use  git rebase  (not  git merge ) to synchronize your work with the main\nrepository.  1\n2 git fetch upstream\ngit rebase upstream/master   This ensures that your working branch has the latest changes from upstream\nbranch master, in [The Bastion Bot GitHub Organization].",
            "title": "Step 5: Rebase"
        },
        {
            "location": "/contributing/pulls/#step-6-push",
            "text": "Once you are sure your commits are ready to go, with passing tests and linting,\nbegin the process of opening a Pull Request by pushing your working branch to\nyour fork on GitHub.  1 git push origin my-branch",
            "title": "Step 6: Push"
        },
        {
            "location": "/contributing/pulls/#step-7-opening-the-pull-request",
            "text": "From within GitHub, opening a new Pull Request will present you with a template\nthat should be filled out:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35 <!--\n    Thank you for your Pull Request. Please provide a description above and fill\n    in as much of the template below as you're able.\n-->\n\n#### Purpose of this Pull Request\n<!-- Change [ ] to [X] if a statement is true. -->\n\n- [ ] Non-code changes (e.g. documentation, strings, readme, etc.)\n- [ ] Bug fixes\n- [ ] Improvements/enhancements\n- [ ] Add a feature/command\n- [ ] Remove a feature/command\n- [ ] Add something to the core\n- [ ] Remove something from the core\n- [ ] Other, please explain:\n\n#### Possible drawbacks\n<!--\n    Are there any possible side-effects or negative impacts of the code change?\n    If yes, please, state them.\n-->\n\n#### Applicable Issues:\n<!--\n    Link any applicable Issues/PRs here. With a brief description explaining\n    why.\n-->\n\n#### Checklist\n<!-- For completed items, change [ ] to [x]. -->\n\n- [ ] Test scripts (if any) passes\n- [ ] documentation is changed or added\n- [ ] commit message follows commit guidelines   Please try to do your best at filling out the details, but feel free to skip\nparts if you\u2019re not sure what to put.  Once opened, Pull Requests are usually reviewed within a few days.",
            "title": "Step 7: Opening the Pull Request"
        },
        {
            "location": "/contributing/pulls/#step-8-discuss-and-update",
            "text": "You will probably get feedback or requests for changes to your Pull Request.\nThis is a big part of the submission process so don\u2019t be discouraged! Some\ncontributors may sign off on the Pull Request right away, others may have\nmore detailed comments or feedback. This is a necessary part of the process\nin order to evaluate whether the changes are correct and necessary.  If you are still working on your Pull Request after you\u2019ve opened it, please\nadd a  [WIP]  prefix to the Pull Request title, so that our  Bastion GitHub Bot \nwill prevent the Pull Request from being merged, until you\u2019re done working with\nit and remove the  [WIP]  prefix.  1 [WIP] Add Spanish translation   To make changes to an existing Pull Request, make the changes to your local\nbranch, add a new commit with those changes, and push those to your fork.\nGitHub will automatically update the Pull Request.  1\n2\n3 git add my/changed/files\ngit commit\ngit push origin my-branch   It is also frequently necessary to synchronize your Pull Request with other\nchanges that have landed in  master  by using  git rebase :  1\n2\n3 git fetch --all\ngit rebase origin/master\ngit push --force-with-lease origin my-branch   Important:  The  git push --force-with-lease  command is one of the few ways\nto delete history in  git . Before you use it, make sure you understand the\nrisks. If in doubt, you can always ask for guidance in the Pull Request comments\nor in the  Bastion HQ .  If you happen to make a mistake in any of your commits, do not worry. You can\namend the last commit (for example if you want to change the commit log).  1\n2\n3 git add any/changed/files\ngit commit --amend\ngit push --force-with-lease origin my-branch   There are a number of more advanced mechanisms for managing commits using git rebase  that can be used, but are beyond the scope of this guide.  Feel free to post a comment in the Pull Request to ping reviewers if you are\nawaiting an answer on something. If you encounter words or acronyms that\nseem unfamiliar, refer to this glossary .",
            "title": "Step 8: Discuss and update"
        },
        {
            "location": "/contributing/pulls/#approval-and-request-changes-workflow",
            "text": "All Pull Requests require \u201csign off\u201d in order to land. Whenever a contributor\nreviews a Pull Request they may find specific details that they would like to\nsee changed or fixed. These may be as simple as fixing a typo, or may involve\nsubstantive changes to the code you have written. While such requests are\nintended to be helpful, they may come across as abrupt or unhelpful, especially\nrequests to change things that do not include concrete suggestions on  how  to\nchange them.  Try not to be discouraged. If you feel that a particular review is unfair,\nsay so, or contact one of the other contributors in the project and seek their\ninput. Often such comments are the result of the reviewer having only taken a\nshort amount of time to review and are not ill-intended. Such issues can often\nbe resolved with a bit of patience. That said, reviewers should be expected to\nbe helpful in their feedback, and feedback that is simply vague, dismissive and\nunhelpful is likely safe to ignore.",
            "title": "Approval and Request Changes Workflow"
        },
        {
            "location": "/contributing/pulls/#step-9-landing",
            "text": "In order to land, a Pull Request needs to be reviewed and [approved] by\nat least one Bastion Collaborator and pass all the required status checks.\nAfter that, as long as there are no objections from other contributors, the Pull\nRequest can be merged. If you find your Pull Request waiting longer than you\nexpect, see the  notes about the waiting time .  When a collaborator lands your Pull Request, they should and will post\na comment to the Pull Request page thanking you for your contribution.\nIf you look at the branch you raised your Pull Request against (probably master ), you should see your commits in it.  Congratulations and thanks for your contribution!",
            "title": "Step 9: Landing"
        },
        {
            "location": "/contributing/pulls/#reviewing-pull-requests",
            "text": "All contributors who choose to review and provide feedback on Pull Requests have\na responsibility to both the project and the individual making the contribution.\nReviews and feedback must be helpful, insightful, and geared towards improving\nthe contribution as opposed to simply blocking it. If there are reasons why you\nfeel the PR should not land, explain what those are. Do not expect to be able to\nblock a Pull Request from advancing simply because you say \u201cNo\u201d without giving\nan explanation. Be open to having your mind changed. Be open to working with the\ncontributor to make the Pull Request better.  Reviews that are dismissive or disrespectful of the contributor or any other\nreviewers are strictly counter to the  Code of Conduct .  When reviewing a Pull Request, the primary goals are for the codebase to improve\nand for the person submitting the request to succeed. Even if a Pull Request\ndoes not land, the submitters should come away from the experience feeling like\ntheir effort was not wasted or unappreciated. Every Pull Request from a new\ncontributor is an opportunity to grow the community.",
            "title": "Reviewing Pull Requests"
        },
        {
            "location": "/contributing/pulls/#review-a-bit-at-a-time",
            "text": "Do not overwhelm new contributors.  It is tempting to micro-optimize and make everything about relative performance,\nperfect grammar, or exact style matches. Do not succumb to that temptation.  Focus first on the most significant aspects of the change:   Does this change make sense for the project?  Does this change make the project better, even if only incrementally?  Are there clear bugs or larger scale issues that need attending to?  Is the commit message readable and correct? If it contains a breaking change\n    is it clear enough?   When changes are necessary,  request  them, do not  demand  them, and do not\nassume that the submitter already knows how to do a task that you think is\nobvious, it might not be that obvious for him and that\u2019s okay; Every one starts\nat some point, and they will learn with time.  Specific performance optimization techniques, coding styles and conventions\nchange over time. The first impression you give to a new contributor never does.  Nits (requests for small changes that are not essential) are fine, but try to\navoid stalling the Pull Request. Most nits can typically be fixed by the\nCollaborator landing the Pull Request but they can also be an opportunity for\nthe contributor to learn a bit more about the project.  It is always good to clearly indicate nits when you comment: e.g. Nit: change foo() to bar(). But this is not blocking.  If your comments were addressed but were not folded automatically after new\ncommits or if they proved to be mistaken, please,  hide them \nwith the appropriate reason to keep the conversation flow concise and relevant.",
            "title": "Review a bit at a time."
        },
        {
            "location": "/contributing/pulls/#be-aware-of-the-person-behind-the-code",
            "text": "Be aware that  how  you communicate requests and reviews in your feedback can\nhave a significant impact on the success of the Pull Request. Yes, we may land\na particular change that makes the project better, but the individual might just\nnot want to have anything to do with the project ever again. The goal is not\njust having good code.",
            "title": "Be aware of the person behind the code"
        },
        {
            "location": "/contributing/pulls/#respect-the-minimum-wait-time-for-comments",
            "text": "There is a minimum waiting time which we try to respect for important\nchanges, so that people who may have important input are able to respond.  For important changes, Pull Requests must be left open for  at least  48\nhours during the week, and 72 hours on a weekend. In most cases, when the\nPR is relatively small and focused on a narrow set of changes, these periods\nprovide more than enough time to adequately review. Sometimes changes take far\nlonger to review, or need more specialized review from subject matter experts.\nWhen in doubt, do not rush.  Trivial changes, typically limited to small formatting changes or fixes to\ndocumentation, may be landed within the minimum 48 hour window.",
            "title": "Respect the minimum wait time for comments"
        },
        {
            "location": "/contributing/pulls/#abandoned-or-stalled-pull-requests",
            "text": "If a Pull Request appears to be abandoned or stalled, it is polite to first\ncheck with the contributor to see if they intend to continue the work before\nchecking if they would mind if you took it over (especially if it just has\nnits left). When doing so, it is courteous to give the original contributor\ncredit for the work they started (either by preserving their name and email\naddress in the commit log, or by using an  Author:  meta-data tag in the\ncommit.",
            "title": "Abandoned or Stalled Pull Requests"
        },
        {
            "location": "/contributing/pulls/#approving-a-change",
            "text": "Any Collaborator (any GitHub user with commit rights in the project\u2019s\nrepositories) is authorized to approve any other contributor\u2019s work.\nCollaborators are not permitted to approve their own Pull Requests.  Collaborators indicate that they have reviewed and approve of the changes in\na Pull Request either by using GitHub\u2019s Approval Workflow, which is preferred,\nor by leaving an  LGTM  (\u201cLooks Good To Me\u201d) comment.  When explicitly using the \u201cChanges requested\u201d component of the GitHub Approval\nWorkflow, show empathy. That is, do not be rude or abrupt with your feedback\nand offer concrete suggestions for improvement, if possible. If you\u2019re not\nsure  how  a particular change can be improved, say so.  Most importantly, after leaving such requests, it is courteous to make yourself\navailable later to check whether your comments have been addressed.  If you see that requested changes have been made, you can clear another\ncollaborator\u2019s  Changes requested  review.  Change requests that are vague, dismissive, or unconstructive may also be\ndismissed if requests for greater clarification go unanswered within a\nreasonable period of time.  If you do not believe that the Pull Request should land at all, use Changes requested  to indicate that you are considering some of your comments\nto block the PR from landing. When doing so, explain  why  you believe the\nPull Request should not land along with an explanation of what may be an\nacceptable alternative course, if any.",
            "title": "Approving a change"
        },
        {
            "location": "/coc/",
            "text": "Contributor Covenant Code of Conduct\n#\n\n\nOur Pledge\n#\n\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n\nOur Standards\n#\n\n\nExamples of behavior that contributes to creating a positive environment include:\n\n\n\n\nUsing welcoming and inclusive language\n\n\nBeing respectful of differing viewpoints and experiences\n\n\nGracefully accepting constructive criticism\n\n\nFocusing on what is best for the community\n\n\nShowing empathy towards other community members\n\n\n\n\nExamples of unacceptable behavior by participants include:\n\n\n\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\n\n\nTrolling, insulting/derogatory comments, and personal or political attacks\n\n\nPublic or private harassment\n\n\nPublishing others\u2019 private information, such as a physical or electronic address, without explicit permission\n\n\nOther conduct which could reasonably be considered inappropriate in a professional setting\n\n\n\n\nOur Responsibilities\n#\n\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n\nScope\n#\n\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n\nEnforcement\n#\n\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at \nreport@bastionbot.org\n. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership.\n\n\nAttribution\n#\n\n\nThis Code of Conduct is adapted from the \nContributor Covenant\n, version 1.4, available at \nhttp://contributor-covenant.org/version/\u00bc",
            "title": "Code of Conduct"
        },
        {
            "location": "/coc/#contributor-covenant-code-of-conduct",
            "text": "",
            "title": "Contributor Covenant Code of Conduct"
        },
        {
            "location": "/coc/#our-pledge",
            "text": "In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.",
            "title": "Our Pledge"
        },
        {
            "location": "/coc/#our-standards",
            "text": "Examples of behavior that contributes to creating a positive environment include:   Using welcoming and inclusive language  Being respectful of differing viewpoints and experiences  Gracefully accepting constructive criticism  Focusing on what is best for the community  Showing empathy towards other community members   Examples of unacceptable behavior by participants include:   The use of sexualized language or imagery and unwelcome sexual attention or advances  Trolling, insulting/derogatory comments, and personal or political attacks  Public or private harassment  Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission  Other conduct which could reasonably be considered inappropriate in a professional setting",
            "title": "Our Standards"
        },
        {
            "location": "/coc/#our-responsibilities",
            "text": "Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.  Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.",
            "title": "Our Responsibilities"
        },
        {
            "location": "/coc/#scope",
            "text": "This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.",
            "title": "Scope"
        },
        {
            "location": "/coc/#enforcement",
            "text": "Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at  report@bastionbot.org . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.  Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u2019s leadership.",
            "title": "Enforcement"
        },
        {
            "location": "/coc/#attribution",
            "text": "This Code of Conduct is adapted from the  Contributor Covenant , version 1.4, available at  http://contributor-covenant.org/version/\u00bc",
            "title": "Attribution"
        }
    ]
}